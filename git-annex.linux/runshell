#!/bin/sh
# Runs a shell command (or interactive shell) using the binaries and
# libraries bundled with this app.

set -e

base="$(dirname "$0")"

if [ ! -d "$base" ]; then
	echo "** cannot find base directory (I seem to be $0)" >&2
	exit 1
fi

if [ ! -e "$base/bin/git-annex" ]; then
	echo "** base directory $base does not contain bin/git-annex" >&2
	exit 1
fi
if [ ! -e "$base/bin/git" ]; then
	echo "** base directory $base does not contain bin/git" >&2
	exit 1
fi

# Get absolute path to base, to avoid breakage when things change directories.
orig="$(pwd)"
cd "$base"
base="$(pwd)"
cd "$orig"

# Install shim that's used to run git-annex-shell from ssh authorized_keys.
# The assistant also does this when run, but the user may not be using the
# assistant.
if [ ! -e "$HOME/.ssh/git-annex-shell" ]; then
	mkdir "$HOME/.ssh" >/dev/null 2>&1 || true
	(
		echo "#!/bin/sh"
		echo "set -e"
		echo "if [ \"x\$SSH_ORIGINAL_COMMAND\" != \"x\" ]; then"
		echo "exec $base/runshell git-annex-shell -c \"\$SSH_ORIGINAL_COMMAND\""
		echo "else"
		echo "exec $base/runshell git-annex-shell -c \"\$@\""
		echo "fi"
	) > "$HOME/.ssh/git-annex-shell"
	chmod +x "$HOME/.ssh/git-annex-shell"
fi

# And this shim is used by the webapp when adding a remote ssh server.
if [ ! -e "$HOME/.ssh/git-annex-wrapper" ]; then
	mkdir "$HOME/.ssh" >/dev/null 2>&1 || true
	(
		echo "#!/bin/sh"
		echo "set -e"
		echo "exec $base/runshell \"\$@\""
	) > "$HOME/.ssh/git-annex-wrapper"
	chmod +x "$HOME/.ssh/git-annex-wrapper"
fi

# Put our binaries first, to avoid issues with out of date or incompatable
# system binaries.
ORIG_PATH="$PATH"
export ORIG_PATH
PATH=$base/bin:$PATH
export PATH

# This is used by the shim wrapper around each binary.
for lib in $(cat $base/libdirs); do
	GIT_ANNEX_LD_LIBRARY_PATH="$base/$lib:$GIT_ANNEX_LD_LIBRARY_PATH"
done
export GIT_ANNEX_LD_LIBRARY_PATH
GIT_ANNEX_DIR="$base"
export GIT_ANNEX_DIR

ORIG_GCONV_PATH="$GCONV_PATH"
export ORIG_GCONV_PATH
GCONV_PATH=$base/$(cat $base/gconvdir)
export GCONV_PATH

# workaround for https://ghc.haskell.org/trac/ghc/ticket/7695
LOCPATH=/dev/null
export LOCPATH

ORIG_GIT_EXEC_PATH="$GIT_EXEC_PATH"
export ORIG_GIT_EXEC_PATH
GIT_EXEC_PATH=$base/git-core
export GIT_EXEC_PATH

ORIG_GIT_TEMPLATE_DIR="$GIT_TEMPLATE_DIR"
export ORIG_GIT_TEMPLATE_DIR
GIT_TEMPLATE_DIR="$base/templates"
export GIT_TEMPLATE_DIR

ORIG_MANPATH="$MANPATH"
export ORIG_MANPATH
MANPATH="$base/usr/share/man:$MANPATH"
export MANPATH

# Indicate which variables were exported above and should be cleaned
# when running non-bundled programs.
GIT_ANNEX_STANDLONE_ENV="PATH GCONV_PATH GIT_EXEC_PATH GIT_TEMPLATE_DIR MANPATH"
export GIT_ANNEX_STANDLONE_ENV

if [ "$1" ]; then
	cmd="$1"
	shift 1
	exec "$cmd" "$@"
else
	sh
fi
