.TH git-annex-expire 1
.SH NAME
git\-annex expire \- expire inactive repositories
.PP
.SH SYNOPSIS
git annex expire \fB[repository:]time ...\fP
.PP
.SH DESCRIPTION
This command expires repositories that have not performed some activity
within a specified time period. A repository is expired by marking it as
dead. De\-expiration is also done; if a dead repository performed some
activity recently, it is marked as semitrusted again.
.PP
This can be useful when it's not possible to keep track of the state
of repositories manually. For example, a distributed network of
repositories where nobody can directly access all the repositories to
check their status.
.PP
The repository can be specified using the name of a remote,
or the description or uuid of the repository. 
.PP
The time is in the form "60d" or "1y". A time of "never" will disable
expiration.
.PP
If a time is specified without a repository, it is used as the default
value for all repositories. Note that the current repository is never
expired.
.PP
.SH OPTIONS
.IP "\fB\-\-no\-act\fP"
.IP
Print out what would be done, but not not actually expite or unexpire
any repositories.
.IP
.IP "\fB\-\-activity=Name\fP"
Specify the activity that a repository must have performed to avoid being
expired. The default is any activity.
.IP
Currently, the only activity that can be performed to avoid expiration
is \fBgit annex fsck\fP. Note that fscking a remote updates the
expiration of the remote repository, not the local repository.
.IP
The first version of git\-annex that recorded fsck activity was
5.20150405.
.IP
.SH SEE ALSO
git\-annex(1)
.PP
git\-annex\-fsck(1)
.PP
git\-annex\-schedule(1)
.PP
git\-annex\-dead(1)
.PP
git\-annex\-semitrust(1)
.PP
.SH AUTHOR
Joey Hess <id@joeyh.name>
.PP
.PP

