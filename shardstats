#!/bin/bash
# Gets stats for a specified SHARD, or ALL
set -e

: ${STATS_DIR:=/var/www/html/stats}
: ${GEOIP_DIR:=/srv/geoip}
: ${SHARD_DIR:=/srv/shard}
: ${CLIENT_DIR:=/usr/local/IA.BAK/client}
: ${UTIL_DIR:=/usr/local/IA.BAK/utils}
: ${PUBKEYS_DIR:=/usr/local/IA.BAK/pubkeys}
: ${GRAPHITE_HOST:=127.0.0.1}
: ${GRAPHITE_PORT:=2003}
DATE=$(date +%s)
REPORTDATE="${2:-$DATE}"

sendStat () {
	stat=$1
	value=$2
	stamp=${3:-$REPORTDATE}
	if [ -z "$stat" -o -z "$value" ]; then
		echo "missing argument to sendStat $1 $2"
		exit
	fi
	MSG="iabak.shardstats.${stat}.${shard} ${value} ${stamp}"
	echo "${MSG}"
	echo "${MSG}" | nc -q 0 "${GRAPHITE_HOST}" "${GRAPHITE_PORT}"
}

SHARD="$1"
if [ -z "$SHARD" ]; then
	echo "Usage: shardstats SHARDn" >&2
	exit 1
fi
shard="$(echo "$SHARD" | tr A-Z a-z)"

mkdir -p ${STATS_DIR}/

if [ "$SHARD" != ALL ]; then
	DIR="${SHARD_DIR}/$shard"
	set +e
	"$UTIL_DIR/updateclone" "$DIR" "$SHARD" "/home/$SHARD/$shard.git"
	EXITCODE="$?"
	set -e
	cd "$DIR"
	if [ "$EXITCODE" != 100 ]; then
		INFOTMP="$(tempfile)"
		su "$SHARD" -c -- "git annex info . --bytes" > "$INFOTMP"

		TMP="$(tempfile)"
		grep "numcopies " "$INFOTMP" > "$TMP"
		chmod 644 "$TMP"
		mv "$TMP" "${STATS_DIR}/$SHARD"

		TMP="$(tempfile)"
		grep " -- " "$INFOTMP" | grep -v 00000000-0000-0000-0000-000000000001 | perl -pe 's/^\s+//' > "$TMP"
		chmod 644 "$TMP"
		mv "$TMP" "${STATS_DIR}/$SHARD".leaderboard-raw
	
		TMP="$(tempfile)"
		perl -ne 'if (/size of annexed files in working tree: ([.0-9]+)/) { print (int($1/10000000000)/100)."\n" }' < "$INFOTMP" > "$TMP"
		chmod 644 "$TMP"
		mv "$TMP" "${STATS_DIR}/$SHARD.size"
		
		rm -f "$INFOTMP"
	else
		echo "No changes, avoided expensive stats gathering.."
	fi
	
	TMP="$(tempfile)"
	su "$SHARD" -c -- "git annex expire --no-act 21d web:never origin:never" > "$TMP"
	chmod 644 "$TMP"
	mv "$TMP" "${STATS_DIR}/$SHARD".expire
		
	TMP="$(tempfile)"
	su "$SHARD" -c -- "git annex expire --no-act 14d web:never origin:never" > "$TMP"
	chmod 644 "$TMP"
	mv "$TMP" "${STATS_DIR}/$SHARD".warning
fi

NUMTMP="$(tempfile)"
if [ "$SHARD" != ALL ]; then
	GREPSHARD="$SHARD"
	grep 'numcopies +' "${STATS_DIR}/$SHARD" > "$NUMTMP"
else
	GREPSHARD="SHARD"
	grep -h 'numcopies +' "${STATS_DIR}"/SHARD[0-9]* > "$NUMTMP"
	STATTMP="$(tempfile)"
	echo "numcopies stats: " > "$STATTMP"
	for n in $(seq 0 10); do
		perl -le 'BEGIN { $want=shift; $total=0 }; while (<>) { ($mult, $cnt) = m/.*numcopies \+(\d+):\s+(\d+)/; $total=$total+$cnt if $mult == $want } END { print "\tnumcopies +$want: $total" }' $n "$NUMTMP" >> "$STATTMP"
	done
	chmod 644 "$STATTMP"
	mv "$STATTMP" "${STATS_DIR}/ALL"

	TMP="$(tempfile)"
	perl -ne '$n+=$_; END { print "$n\n" }' "${STATS_DIR}"/SHARD[0-9]*.size > "$TMP"
	chmod 644 "$TMP"
	mv "$TMP" "${STATS_DIR}/ALL.size"
	
	TMP="$(tempfile)"
	sort -r -n "${STATS_DIR}"/SHARD[0-9]*.leaderboard-raw > "$TMP"
	chmod 644 "$TMP"
	mv "$TMP" "${STATS_DIR}/ALL.leaderboard-raw"
fi

sendStat "filesize" "$(<${STATS_DIR}/${SHARD}.size)"

while read size uuid rest; do
	sendStat "leaderboard.${uuid}" $(echo $size | sed -e 's/://')
done < "${STATS_DIR}/$SHARD.leaderboard-raw"

counts=()
total=0
filecount=0
maxcopies=0
while read mult count; do
	counts[$mult]=$count
	total=$(($total+($count*$mult)))
	filecount=$(($filecount+$count))
	if (($mult>$maxcopies)); then
		maxcopies=$mult
	fi
done < <(tail -n +2 "${STATS_DIR}/$SHARD" | sed -e "s/\s*numcopies [+-]\([0-9]*\):/\1/g")
sendStat "numcopies.total" "${total}"
sendStat "filecount" "${filecount}"
i=0
while (($i<=$maxcopies)); do
	sendStat "numcopies.${i}" "${counts[$i]:-0}"
	i=$(($i+1))
done

perl -le 'while (<>) { ($mult, $cnt) = m/.*numcopies \+(\d+):\s+(\d+)/; $total=$total+($cnt*$mult) }; print localtime()."\t".$total' < "$NUMTMP" >> "${STATS_DIR}/$SHARD.filestransferred"
data=$(tail -1 "${STATS_DIR}/$SHARD.filestransferred")
date="$(echo "$data" | cut -f 1)"
count="$(echo "$data" | cut -f 2)"
sendStat "filestransfered" "${count}" "$(date --date "${date}" +%s)"

mkdir -p "${GEOIP_DIR}"
GEOLIST="$(tempfile)"
for ip in $(journalctl _SYSTEMD_UNIT=ssh.service --since='-31 days'  | grep 'Accepted publickey' | grep "$GREPSHARD" | awk '{print $11}' | sort -u); do
	if [ ! -e "${GEOIP_DIR}/$ip" ]; then
		TMP="$(tempfile)"
		wget -q -O "$TMP" "freegeoip.net/json/${ip}"
		mv "$TMP" "${GEOIP_DIR}/$ip"
	fi
	cat "${GEOIP_DIR}/$ip" | sed 's/{.*\"country_code\"/{\"country_code\"/g' | sed 's/,\"latitude\".*/}/g' >> "$GEOLIST"
done
chmod 644 "$GEOLIST"
mv "$GEOLIST" "${STATS_DIR}/$SHARD.geolist"

CONNS="$(tempfile)"
journalctl _SYSTEMD_UNIT=ssh.service --since='-31 days' | grep -h "Accepted publickey for $GREPSHARD" | perl -pe 's/:.*/:00/' | uniq  -c > "$CONNS"
chmod 644 "$CONNS"
data=$(tail -1 "$CONNS" | sed -e 's/^\s*\([0-9]*\) /\1\t/g' -e 's/:00$/:59:59/g')
count="$(echo "$data" | cut -f 1)"
if [ -z "$count" ]; then
	count=0
fi
date="$(echo "$data" | cut -f 2)"
sendStat "connections" "${count}" "$(date --date "${date}" +%s)"
mv "$CONNS" "${STATS_DIR}/$SHARD.clientconnsperhour"

TMP="$(tempfile)"
if [ "$SHARD" != ALL ]; then
	"$UTIL_DIR/expireleaderboard" "${STATS_DIR}/$SHARD".expire "${STATS_DIR}/$SHARD".leaderboard-raw | sort -rn > "$TMP"
else
	cat ${STATS_DIR}/SHARD*.expireleaderboard-raw | sort -rn > "$TMP"
fi
chmod 644 "$TMP"
mv "$TMP" "${STATS_DIR}/$SHARD".expireleaderboard-raw

TMP="$(tempfile)"
if [ "$SHARD" != ALL ]; then
	"$UTIL_DIR/expireleaderboard" "${STATS_DIR}/$SHARD".warning "${STATS_DIR}/$SHARD".leaderboard-raw | sort -rn | (grep -F -x -v -f "${STATS_DIR}/$SHARD".expireleaderboard-raw || true) > "$TMP"
else
	cat ${STATS_DIR}/SHARD*.warningleaderboard-raw | sort -rn > "$TMP"
fi
chmod 644 "$TMP"
mv "$TMP" "${STATS_DIR}/$SHARD".warningleaderboard-raw

TMP="$(tempfile)"
(cd "${PUBKEYS_DIR}"; git pull)
cat "${STATS_DIR}/${SHARD}.leaderboard-raw" | "$UTIL_DIR/uuidtoemail" "$PUBKEYS_DIR" | "$UTIL_DIR/combineemails" | sort -rn | perl -ne 'chomp; s/([^\s]+) ([^\s]+) (.*)/$2 $3 $1/; print "$_\n"' > "$TMP"
chmod 644 "$TMP"
mv "$TMP" "${STATS_DIR}/${SHARD}.leaderboard"

TMP="$(tempfile)"
cat "${STATS_DIR}/${SHARD}.expireleaderboard-raw" | "$UTIL_DIR/uuidtoemail-expiring" "$PUBKEYS_DIR" | "$UTIL_DIR/combineemails" | sort -rn | perl -ne 'chomp; s/([^\s]+) ([^\s]+) (.*)/$2 $3 $1/; print "$_\n"' > "$TMP"
chmod 644 "$TMP"
mv "$TMP" "${STATS_DIR}/${SHARD}.expireleaderboard"

TMP="$(tempfile)"
cat "${STATS_DIR}/${SHARD}.warningleaderboard-raw" | "$UTIL_DIR/uuidtoemail-expiring" "$PUBKEYS_DIR" | "$UTIL_DIR/combineemails" | sort -rn | perl -ne 'chomp; s/([^\s]+) ([^\s]+) (.*)/$2 $3 $1/; print "$_\n"' > "$TMP"
chmod 644 "$TMP"
mv "$TMP" "${STATS_DIR}/${SHARD}.warningleaderboard"

if [ "$SHARD" != ALL ]; then
	CTMP="$(tempfile)"
	ls -1 > "$CTMP"
	chmod 644 "$CTMP"
	mv "$CTMP" "${STATS_DIR}/$SHARD.collections"
else
	CTMP="$(tempfile)"
	ATMP="$(tempfile)"
	ALTMP="$(tempfile)"
	MLTMP="$(tempfile)"
	(cd "${CLIENT_DIR}"; git pull)
	for s in $(grep ' active$' "${CLIENT_DIR}/repolist" | cut -d ' ' -f 1 | tr a-z A-Z); do
		cat "${STATS_DIR}/$s.collections" >> "$CTMP"
		cat "${STATS_DIR}/$s.collections" >> "$ATMP"
		echo "$s" >> "$ALTMP"
	done
	for s in $(grep -v ' active$' "${CLIENT_DIR}/repolist" | cut -d ' ' -f 1 | tr a-z A-Z); do
		cat "${STATS_DIR}/$s.collections" >> "$CTMP"
	done
	for s in $(grep ' maint' "${CLIENT_DIR}/repolist" | cut -d ' ' -f 1 | tr a-z A-Z); do
		echo "$s" >> "$MLTMP"
	done
	chmod 644 "$CTMP"
	mv "$CTMP" "${STATS_DIR}/ALL.collections"
	chmod 644 "$ATMP"
	mv "$ATMP" "${STATS_DIR}/ALL.collections.active"
	chmod 644 "$ALTMP"
	mv "$ALTMP" "${STATS_DIR}/ALL.shardlist.active"
	chmod 644 "$MLTMP"
	mv "$MLTMP" "${STATS_DIR}/ALL.shardlist.maint"
	
	TMP="$(tempfile)"
	find "${STATS_DIR}"/SHARD[0-9]* -printf '%f\n' | grep -v \\. > "$TMP"
	chmod 644 "$TMP"
	mv "$TMP" "${STATS_DIR}/ALL.shardlist"
fi

(cd ${STATS_DIR} && tar czf "../stats.tar.gz.new" .)
mv "${STATS_DIR}/../stats.tar.gz.new" "${STATS_DIR}/../stats.tar.gz"

ENDDATE=$(date +%s)
sendStat "statCollectionTime" "$((ENDDATE - DATE))"
